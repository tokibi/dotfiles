# modifiers and literals: https://github.com/koekeishiya/skhd/issues/1
# yabai commands: https://github.com/koekeishiya/yabai/wiki/Commands

#
# A hotkey is written according to the following rules:
#
#   hotkey       = <mode> '<' <action> | <action>
#
#   mode         = 'name of mode' | <mode> ',' <mode>
#
#   action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                  <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                  <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#   keysym       = <mod> '-' <key> | <key>
#
#   mod          = 'modifier keyword' | <mod> '+' <mod>
#
#   key          = <literal> | <keycode>
#
#   literal      = 'single letter or built-in keyword'
#
#   keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#   proc_map_lst = * <proc_map>
#
#   proc_map     = <string> ':' <command> | <string>     '~' |
#                  '*'      ':' <command> | '*'          '~'
#
#   string       = '"' 'sequence of characters' '"'
#
#   command      = command is executed through '$SHELL -c' and
#                  follows valid shell syntax. if the $SHELL environment
#                  variable is not set, it will default to '/bin/bash'.
#                  when bash is used, the ';' delimeter can be specified
#                  to chain commands.
#
#                  to allow a command to extend into multiple lines,
#                  prepend '\' at the end of the previous line.
#
#                  an EOL character signifies the end of the bind.
#
#   ->           = keypress is not consumed by skhd
#
#   *            = matches every application not specified in <proc_map_lst>
#
#   ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
# A mode is declared according to the following rules:
#
#   mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#               '::' <name> '@'               | '::' <name>
#
#   name      = desired name for this mode,
#
#   @         = capture keypresses regardless of being bound to an action
#
#   command   = command is executed through '$SHELL -c' and
#               follows valid shell syntax. if the $SHELL environment
#               variable is not set, it will default to '/bin/bash'.
#               when bash is used, the ';' delimeter can be specified
#               to chain commands.
#
#               to allow a command to extend into multiple lines,
#               prepend '\' at the end of the previous line.
#
#               an EOL character signifies the end of the bind.
#

:: default : yabai -m config active_window_border_color 0xffffa500
:: app : yabai -m config active_window_border_color 0xffdc143c

# restart
fn + cmd - q : \
        /usr/bin/env osascript <<< 'display notification "Restarting Yabai" with title "Yabai"'; \
        brew services restart yabai
fn + cmd - r : \
        /usr/bin/env osascript <<< 'display notification "Restarting skhd" with title "skhd"'; \
        brew services restart skhd

# toggle fullscreen
fn - f : yabai -m window --toggle zoom-fullscreen

# focus window
# (If there is a window that is full-screened, disable it.)
fn - h : $XDG_CONFIG_HOME/yabai/bin/disable-fullscreen.sh; \
         yabai -m window --focus west || yabai -m display --focus west
fn - j : $XDG_CONFIG_HOME/yabai/bin/disable-fullscreen.sh; \
         yabai -m window --focus south || yabai -m display --focus south
fn - k : $XDG_CONFIG_HOME/yabai/bin/disable-fullscreen.sh; \
         yabai -m window --focus north || yabai -m display --focus north
fn - l : $XDG_CONFIG_HOME/yabai/bin/disable-fullscreen.sh; \
         yabai -m window --focus east || yabai -m display --focus east
fn - p : $XDG_CONFIG_HOME/yabai/bin/disable-fullscreen.sh; \
         yabai -m window --focus west || yabai -m display --focus recent

# create and focus space
fn + cmd - n : \
        yabai -m space --create && \
        index="$(yabai -m query --spaces --display | jq 'map(select(."is-native-fullscreen" == false))[-1].index')" && \
        yabai -m space --focus "${index}"
# destroy space
fn + cmd - w : yabai -m space --destroy

# fast focus desktop
fn - 1 : yabai -m space --focus 1
fn - 2 : yabai -m space --focus 2
fn - 3 : yabai -m space --focus 3
fn - 4 : yabai -m space --focus 4
fn - 5 : yabai -m space --focus 5
fn - 6 : yabai -m space --focus 6
fn - 7 : yabai -m space --focus 7
fn - 8 : yabai -m space --focus 8
fn - 9 : yabai -m space --focus 9

# fast focus previous and next desktop
fn + cmd - p : yabai -m space --focus prev
fn + cmd - n : yabai -m space --focus next

# send window to desktop and follow focus
fn + cmd - 1 : yabai -m window --space  1; yabai -m space --focus 1
fn + cmd - 2 : yabai -m window --space  2; yabai -m space --focus 2
fn + cmd - 3 : yabai -m window --space  3; yabai -m space --focus 3
fn + cmd - 4 : yabai -m window --space  4; yabai -m space --focus 4
fn + cmd - 5 : yabai -m window --space  5; yabai -m space --focus 5
fn + cmd - 6 : yabai -m window --space  6; yabai -m space --focus 6
fn + cmd - 7 : yabai -m window --space  7; yabai -m space --focus 7
fn + cmd - 8 : yabai -m window --space  8; yabai -m space --focus 8
fn + cmd - 9 : yabai -m window --space  8; yabai -m space --focus 9
fn + cmd - 0 : yabai -m window --space  8; yabai -m space --focus 0

# balance size of windows
fn - b : yabai -m space --balance

# increase window size
fn - w : yabai -m window --resize top:0:-20
fn - a : yabai -m window --resize left:-20:0
fn - s : yabai -m window --resize bottom:0:20
fn - d : yabai -m window --resize right:20:0

# decrease window size
# fn + cmd - w : yabai -m window --resize top:0:20
# fn + cmd - a : yabai -m window --resize left:20:0
# fn + cmd - s : yabai -m window --resize bottom:0:-20
# fn + cmd - d : yabai -m window --resize right:-20:0

# rotate tree
fn - r : yabai -m space --rotate 90

# float / unfloat window and center on screen
fn - t : yabai -m window --toggle float --grid 1:4:1:1:2:2

# app mode
fn - o ; app
app < fn - o ; default
app < escape ; default
app < t : open -na /opt/homebrew/bin/wezterm; skhd -k "escape"
app < s : open -na Slack; skhd -k "escape"
app < n : open -na Notion; skhd -k "escape"
app < c : open -na Google\ Chrome; skhd -k "escape"
